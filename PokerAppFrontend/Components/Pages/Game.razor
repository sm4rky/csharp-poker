@page "/game"
@using PokerAppFrontend.Components.Shared
@using PokerAppFrontend.Models
@using PokerAppFrontend.Services
@inject States.RoomClientState Session
@inject IRoomHubClient Hub
@inject NavigationManager Nav
@inject DialogService DialogService

@implements IDisposable

<div class="relative h-screen w-screen flex flex-col">
    <div class="absolute left-1/2 top-[5%] -translate-x-1/2 p-2 rounded-lg flex flex-col items-center gap-2"
         style="top: 5%;">
        <RoundInfo Table="_table"/>
    </div>

    <div class="flex-1 overflow-x-auto overflow-y-hidden flex">
        <div class="relative shrink-0 w-[85vw] lg:w-[60vw] m-auto">
            @if (_table is not null)
            {
                <GameTable
                    Table="_table"
                    ReadyInfo="_ready"
                    ShowdownResult="_showdown"
                    DefaultWinResult="_defaultWin"/>
            }
            else
            {
                <div class="w-full aspect-[5/2] rounded-full
                      bg-dark border-[30px] border-muted-foreground
                      grid place-items-center text-white/60 text-sm">
                    loading tableâ€¦
                </div>
            }
        </div>
    </div>

    <div class="absolute top-2 right-2 z-50 flex justify-end items-center" style="top: 0.5rem">
        <SettingsButton/>
    </div>

    <div class="absolute bottom-2 right-2 z-50 w-96 h-64 p-4 rounded-lg bg-foreground shadow-lg">
        <PlayerControlPanel Table="_table"/>
    </div>

    @if (_table?.BoardAdvisory is not null)
    {
        <HandAnalyzer Table="_table"/>
    }

    @if (_ready is not null)
    {
        <MatchReadyPanel Table="_table" Ready="_ready"/>
    }
</div>

@code {
    private TableDto? _table;
    private ReadyInfoDto? _ready;
    private ShowdownResultDto? _showdown;
    private DefaultWinResultDto? _defaultWin;
    private PlayerDto? _lastStanding;
    private string? _error;
    private bool _subscribed;
    private bool _winnerOpen;

    protected override async Task OnInitializedAsync()
    {
        var tableCode = Session.LastTableCode;
        if (string.IsNullOrWhiteSpace(tableCode))
        {
            Nav.NavigateTo("/", forceLoad: true);
            return;
        }

        if (!_subscribed)
        {
            Hub.TableState += OnTableState;
            Hub.ReadyState += OnReadyState;
            Hub.ShowdownResult += OnShowdownResult;
            Hub.DefaultWinResult += OnDefaultWinResult;
            Hub.LastStanding += OnLastStanding;
            Hub.Error += OnError;
            _subscribed = true;
        }

        try
        {
            await Hub.JoinRoomAsync(tableCode);

            if (!string.IsNullOrWhiteSpace(Session.PlayerToken))
            {
                try
                {
                    await Hub.RejoinAsync(Session.PlayerToken!);
                }
                catch
                {
                    Session.Reset();
                }
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    public void Dispose()
    {
        if (!_subscribed) return;
        Hub.TableState -= OnTableState;
        Hub.ReadyState -= OnReadyState;
        Hub.ShowdownResult -= OnShowdownResult;
        Hub.DefaultWinResult -= OnDefaultWinResult;
        Hub.LastStanding -= OnLastStanding;
        Hub.Error -= OnError;
        _subscribed = false;
    }

    private void OnTableState(TableDto dto)
    {
        _table = dto;

        if (string.Equals(dto.Street, "PreFlop", StringComparison.OrdinalIgnoreCase))
        {
            _showdown = null;
            _defaultWin = null;
            _ready = null;
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnReadyState(ReadyInfoDto dto)
    {
        _ready = dto;
        InvokeAsync(StateHasChanged);
    }

    private void OnShowdownResult(ShowdownResultDto dto)
    {
        _showdown = dto;
        _defaultWin = null;
        InvokeAsync(StateHasChanged);
    }

    private void OnDefaultWinResult(DefaultWinResultDto dto)
    {
        _defaultWin = dto;
        _showdown = null;
        InvokeAsync(StateHasChanged);
    }

    private void OnLastStanding(PlayerDto dto)
    {
        _lastStanding = dto;
        _showdown = null;
        _defaultWin = null;
        _ready = null;

        if (_winnerOpen) return;
        _winnerOpen = true;

        _ = DialogService.OpenAsync<WinnerAnnouncement>(
            "Winner",
            new Dictionary<string, object?>
            {
                ["Player"] = _lastStanding
            },
            new DialogOptions
            {
                Width = "300px",
                CloseDialogOnOverlayClick = false,
                Draggable = false,
                Resizable = false
            }
        ).ContinueWith(_ =>
        {
            _winnerOpen = false;
        });

        InvokeAsync(StateHasChanged);
    }

    private void OnError(string msg)
    {
        _error = msg;
        InvokeAsync(StateHasChanged);
    }

}