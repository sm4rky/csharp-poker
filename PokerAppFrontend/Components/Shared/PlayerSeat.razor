@using PokerAppFrontend.Enums
@using PokerAppFrontend.Models
@inject States.RoomClientState Session
@implements IDisposable

@if (Player is not null)
{
    <SeatInformation
        Player="Player"
        IsLocal="@(Session.LastSeat == Player.SeatIndex)"
        IsCurrentSeatToAct="IsCurrentSeatToAct"
        IsPreviousSeatToAct="IsPreviousSeatToAct"
        IsWinner="@IsWinner"
        Style="@InfoStyle"/>
}

<SeatHole Player="Player" Street="Street" SeatNumber="@SeatNumber" HandRank="@HandRank" IsWinner="@IsWinner" Style="@HoleStyle"/>

@if (IsDealer)
{
    <SeatDealerChip Style="@ChipStyle"/>
}

@if (Player?.CommittedThisStreet > 0)
{
    <SeatCommitmentThisStreet Commitment="Player?.CommittedThisStreet ?? 0" Style="@CommitStyle"/>
}

@code {
    [Parameter] public int SeatNumber { get; set; }
    [Parameter] public PlayerDto? Player { get; set; }
    [Parameter] public bool IsDealer { get; set; }
    [Parameter] public bool IsSmallBlind { get; set; }
    [Parameter] public bool IsBigBlind { get; set; }
    [Parameter] public bool IsCurrentSeatToAct { get; set; }
    [Parameter] public bool IsPreviousSeatToAct { get; set; }
    [Parameter] public Street Street { get; set; }
    [Parameter] public HandRank HandRank { get; set; }
    [Parameter] public int[]? Winners { get; set; }

    private bool _disposed;

    private bool IsWinner => Winners is { Length: > 0 } && Player != null && Winners.Contains(Player.SeatIndex);

    private sealed record Pos(double? Top = null, double? Right = null, double? Bottom = null, double? Left = null)
    {
        public string ToStyle() => string.Join("; ", new[]
        {
            Top is { } t ? $"top:{t}%" : null,
            Right is { } r ? $"right:{r}%" : null,
            Bottom is { } b ? $"bottom:{b}%" : null,
            Left is { } l ? $"left:{l}%" : null
        }.Where(s => s is not null)) + ";";
    }

    private sealed record SeatLayout(Pos Info, Pos Hole, Pos Chip, Pos Commit);

    private static readonly IReadOnlyDictionary<int, SeatLayout> Layouts = new Dictionary<int, SeatLayout>
    {
        [0] = new(
            Info: new Pos(Top: -10, Right: 15),
            Hole: new Pos(Top: 15, Right: 20),
            Chip: new Pos(Top: 15, Right: 20),
            Commit: new Pos(Top: 35, Right: 22)
        ),
        [1] = new(
            Info: new Pos(Top: 50, Right: -22),
            Hole: new Pos(Top: 50, Right: 0),
            Chip: new Pos(Top: 50, Right: 0),
            Commit: new Pos(Top: 50, Right: 15)
        ),
        [2] = new(
            Info: new Pos(Top: 110, Right: 15),
            Hole: new Pos(Top: 85, Right: 20),
            Chip: new Pos(Top: 85, Right: 20),
            Commit: new Pos(Top: 65, Right: 22)
        ),
        [3] = new(
            Info: new Pos(Top: 110, Right: 58),
            Hole: new Pos(Top: 85, Right: 63),
            Chip: new Pos(Top: 85, Right: 63),
            Commit: new Pos(Top: 65, Right: 65)
        ),
        [4] = new(
            Info: new Pos(Top: 50, Right: 94),
            Hole: new Pos(Top: 50, Right: 82),
            Chip: new Pos(Top: 50, Right: 82),
            Commit: new Pos(Top: 50, Left: 20)
        ),
        [5] = new(
            Info: new Pos(Top: -10, Right: 58),
            Hole: new Pos(Top: 15, Right: 63),
            Chip: new Pos(Top: 15, Right: 63),
            Commit: new Pos(Top: 35, Right: 65)
        ),
    };

    private SeatLayout L => Layouts.TryGetValue(SeatNumber, out var x) ? x : Layouts[0];

    private string InfoStyle => L.Info.ToStyle();
    private string HoleStyle => L.Hole.ToStyle();
    private string ChipStyle => L.Chip.ToStyle();
    private string CommitStyle => L.Commit.ToStyle();

    protected override void OnInitialized()
    {
        Session.OnChange += OnSessionChanged;
    }

    private void OnSessionChanged()
    {
        if (!_disposed) InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _disposed = true;
        Session.OnChange -= OnSessionChanged;
    }

}
