@using PokerAppFrontend.Models
@inject States.RoomClientState Session

@implements IDisposable

@if (!IsSeated())
{
    <JoinAsPlayerAction @key=Table?.TableCode Table="Table"/>
}

@if (CanStart())
{
    <StartHandAction @key=Table?.TableCode Table="Table"/>
}

@if (ShowInGameActions())
{
    <InGameActions @key=Table?.TableCode Table="Table" Player="@CurrentPlayer"/>
}

@if (ShowReadyAction())
{
    <ReadyAction/>
}

@code {
    [Parameter, EditorRequired] public required TableDto Table { get; set; } = null!;

    private bool _disposed;

    private PlayerDto? CurrentPlayer =>
        Table?.Players?.FirstOrDefault(p => p.SeatIndex == Session.LastSeat);

    private bool IsSeated()
        => !string.IsNullOrWhiteSpace(Session.PlayerToken) && Session.LastSeat >= 0;

    private bool CanStart()
    {
        if (!IsSeated()) return false;
        var street = Table?.Street;
        return !string.IsNullOrWhiteSpace(Session.LastTableCode)
               && !string.IsNullOrWhiteSpace(street)
               && street.Trim().Equals("waiting", StringComparison.OrdinalIgnoreCase);
    }

    private bool ShowInGameActions()
    {
        if (!IsSeated() || Table is null || CurrentPlayer is null) return false;
        var s = Table.Street?.Trim().ToLowerInvariant();
        return s is "preflop" or "flop" or "turn" or "river";
    }

    private bool ShowReadyAction()
    {
        if (!IsSeated() || Table is null || CurrentPlayer is null) return false;
        var s = Table.Street?.Trim().ToLowerInvariant();
        return s is "showdown" && CurrentPlayer.Stack > 0;
    }

    protected override void OnInitialized()
    {
        Session.OnChange += OnSessionChanged;
    }

    private void OnSessionChanged()
    {
        if (!_disposed) InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _disposed = true;
        Session.OnChange -= OnSessionChanged;
    }

}