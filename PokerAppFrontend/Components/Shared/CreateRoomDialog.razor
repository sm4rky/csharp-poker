@using System.ComponentModel.DataAnnotations
@using PokerAppFrontend.Services
@using PokerAppFrontend.States
@inject DialogService DialogService
@inject IRoomApiClient RoomApiClient
@inject RoomClientState Session
@inject NavigationManager Nav

<EditForm Model="@_form" OnValidSubmit="@HandleSubmit" class="space-y-6">
    <p class="text-muted-foreground">
        Set up your poker room and invite friends to join
    </p>
    
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <RadzenStack Orientation="Orientation.Vertical" Gap="2rem" Style="width: 100%;">
        <div class="space-y-2">
            <div class="flex justify-between items-center">
                <label class="text-xs text-muted-foreground font-medium"># of players</label>
                <span class="text-xs text-muted-foreground">@_form.PlayerCount</span>
            </div>
            <RadzenSlider
                Min="2" Max="6" Step="1"
                @bind-Value="_form.PlayerCount"
                ShowValue="true"
                Style="width: 100%;"/>
            <ValidationMessage For="@(() => _form.PlayerCount)"/>
        </div>

        <RadzenStack Orientation="Orientation.Horizontal"
                     Gap="1rem"
                     AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.End">

            <RadzenButton Text="Cancel"
                          ButtonStyle="ButtonStyle.Light"
                          Click="@(() => DialogService.Close())"/>

            <RadzenButton Text="Create & Join"
                          ButtonStyle="ButtonStyle.Primary"
                          ButtonType="ButtonType.Submit"
                          Disabled="@_isSubmitting"/>
        </RadzenStack>

    </RadzenStack>
</EditForm>

@code {
    private readonly CreateRoomForm _form = new();
    private bool _isSubmitting;

    private async Task HandleSubmit()
    {
        if (_isSubmitting) return;
        _isSubmitting = true;

        try
        {
            var createTableResponse = await RoomApiClient.CreateTableAsync(_form.PlayerCount);
            Session.LastTableCode = createTableResponse.TableCode;
            Nav.NavigateTo("/game");
            DialogService.Close();
        }
        catch (Exception ex)
        {
           // Ignore 
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    public class CreateRoomForm
    {
        [Range(2, 6, ErrorMessage = "Player count must be between 2 and 6")]
        public int PlayerCount { get; set; } = 2;
    }

}
